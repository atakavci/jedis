name: Java Format Check

on:
  workflow_dispatch:
  pull_request:
    paths:
      - '**/*.java' # Only trigger for Java file changes

jobs:
  check-format:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the PR code
      - name: Checkout code
        uses: actions/checkout@v3 

      # Step 2: Set up Java (if needed for format check tools)
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      # Step 3: Fetch latest changes
      - name: Fetch latest changes
        run: git fetch origin

      # Step 4: Find changed Java files
      - name: Get changed Java files
        id: changed_files
        run: |
          echo "::group::Changed Java Files"
          echo Base Branch: ${{ github.event.pull_request.base.ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} | grep '\.java$' || true)
          echo "$CHANGED_FILES"
          echo "::endgroup::"
          # Write the multiline content to a file
          echo "$CHANGED_FILES" > changed_files.txt

      # Step 5: Get formatting issues for source branch 
      - name: Get formatting issues for source branch 
        id: number_of_formatting_issues_source
        run: |
          # Ensure there are changed files
          if [ ! -f changed_files.txt ]; then
            echo "No Java files changed."
          else
            echo "Processing the following changed Java files:"
          
            cat changed_files.txt
            # Read the multiline content from the file
            CHANGED_FILES=$(cat changed_files.txt)

            # # Checkout source branch and store the unformatted file
            # git checkout ${{ github.event.pull_request.head.ref }}

            echo "::group::Iterating changed files in source branch"
            # Iterate over the CHANGED_FILES variable, assuming files are separated by newlines
            while IFS= read -r FILE; do
              # Skip empty lines if any
              if [ -n "$FILE" ]; then
                FILE_NAME=$(basename "$FILE")
                echo "Checking for $FILE_NAME"
                
                # Run your formatter validation for each file
                mvn formatter:format -f formatter-pom.xml "-Dformatter.includes=**/$FILE_NAME"
              fi
            done <<< "$CHANGED_FILES"
            echo "::endgroup::"

            git diff --stat
            # Write diff into a file
            git diff --stat > formatting_diff_source.txt
          fi
          git reset --hard

      # Step 6: Get formatting issues for base branch 
      - name: Get formatting issues for base branch 
        id: number_of_formatting_issues_base
        run: |
          # Ensure there are changed files
          if [ ! -f changed_files.txt ]; then
            echo "No Java files changed."
          else
            echo "Processing the following changed Java files:"
          
            cat changed_files.txt
            # Read the multiline content from the file
            CHANGED_FILES=$(cat changed_files.txt)

            # Checkout source branch and store the unformatted file
            git checkout ${{ github.event.pull_request.base.ref }}

            echo "::group::Iterating changed files in base branch"
            # Iterate over the CHANGED_FILES variable, assuming files are separated by newlines
            while IFS= read -r FILE; do
              # Skip empty lines if any
              if [ -n "$FILE" ]; then
                FILE_NAME=$(basename "$FILE")
                echo "Checking for $FILE_NAME"
                
                # Run your formatter validation for each file
                mvn formatter:format -f formatter-pom.xml "-Dformatter.includes=**/$FILE_NAME"
              fi
            done <<< "$CHANGED_FILES"
            echo "::endgroup::"

            git diff --stat
            # Write diff into a file
            git diff --stat > formatting_diff_base.txt
          fi
          git reset --hard
          
      # Step 7: Compare format diffs
      - name: Compare format diffs
        run: |
          format_source=$(head -n -1 formatting_diff_source.txt | awk '{print $1 " " $3}')
          echo -e "Formatting diff in source branch: \n $format_source"
          format_base=$(head -n -1 formatting_diff_base.txt | awk '{print $1 " " $3}')
          echo -e "Formatting diff in base branch: \n $format_base"
          comm -13 <(echo -e "$format_base") <(echo -e "$format_source") >diff_result.txt

          if [ -s diff_result.txt ]; then
            echo "There are formatting issues introduced with this PR."
            cat diff_result.txt
            exit 1  # Fail the workflow
          else
            echo "No new formatting issue detected."
          fi
